using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ErrorTrackerClient
{

	/// <summary>
	/// A Key/Value pair indicating an attribute of an event. Example keys: "IP Address", "User Name", "URL"
	/// </summary>
	public class Tag
	{
		/// <summary>
		/// Key string. Case-insensitive for matching purposes.
		/// </summary>
		public string Key { get; set; }
		/// <summary>
		/// Value string.
		/// </summary>
		public string Value { get; set; }
		/// <summary>
		/// Zero-argument constructor for deserialization purposes.
		/// </summary>
		public Tag() { }
		/// <summary>
		/// Constructs a new Tag.
		/// </summary>
		/// <param name="Key">
		/// <para>Key string.</para>
		/// <para>Must be non-null and contain at least one alphanumeric character.</para></param>
		/// <para>Must not exactly match any of the reserved Key values "EventType", "SubType", "Message", "Date", "Folder", "Color".</para>
		/// <para>If any of these rules is violated, the Key string will be changed automatically by the server.</para>
		/// <param name="Value">Value of the key.</param>
		public Tag(string Key, string Value)
		{
			this.Key = Key;
			this.Value = Value;
		}
		/// <summary>
		/// <para>Trims and validates the [Key] field, throwing an exception if the key is not valid.</para>
		/// <para>You may call this before submitting the tag to help ensure that unacceptable keys are not generated by your client.</para>
		/// <para>Tags with unacceptable keys will not be dropped, but will be modified by the server and may therefore not have the expected key.</para>
		/// </summary>
		public void ValidateKey()
		{
			if (Key == null)
				throw new Exception("Tag Key cannot be null");
			Key = Key.Trim();
			if (!StringUtil.IsPrintableName(Key))
				throw new Exception("Tag Key is invalid");
			if (Key.Equals("EventType", StringComparison.OrdinalIgnoreCase)
				|| Key.Equals("SubType", StringComparison.OrdinalIgnoreCase)
				|| Key.Equals("Message", StringComparison.OrdinalIgnoreCase)
				|| Key.Equals("Date", StringComparison.OrdinalIgnoreCase)
				|| Key.Equals("Folder", StringComparison.OrdinalIgnoreCase)
				|| Key.Equals("Color", StringComparison.OrdinalIgnoreCase))
				throw new Exception("Tag Key cannot be \"" + Key + "\" (Key is reserved)");
		}
	}
}
