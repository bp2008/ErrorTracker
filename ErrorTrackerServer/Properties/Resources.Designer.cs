//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ErrorTrackerServer.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ErrorTrackerServer.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DO
        ///$do$
        ///BEGIN
        ///	IF NOT EXISTS (SELECT * FROM pg_catalog.pg_roles WHERE rolname = &apos;%DBUSER&apos;)
        ///	THEN
        ///		CREATE ROLE %DBUSER WITH
        ///			LOGIN
        ///			NOSUPERUSER
        ///			CREATEDB
        ///			NOCREATEROLE
        ///			INHERIT
        ///			REPLICATION
        ///			CONNECTION LIMIT -1
        ///			PASSWORD @dbpw;
        ///	END IF;
        ///END
        ///$do$;.
        /// </summary>
        internal static string DbSetup_A_CreateRole {
            get {
                return ResourceManager.GetString("DbSetup_A_CreateRole", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE DATABASE IF NO EXISTS %DBNAME
        ///    WITH 
        ///    OWNER = %DBUSER
        ///    ENCODING = &apos;UTF8&apos;
        ///    CONNECTION LIMIT = -1;.
        /// </summary>
        internal static string DbSetup_B_CreateDb {
            get {
                return ResourceManager.GetString("DbSetup_B_CreateDb", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to COMMENT ON DATABASE &quot;%DBNAME&quot;
        ///    IS &apos;Created by ErrorTracker Service.&apos;;.
        /// </summary>
        internal static string DbSetup_C_CommentDb {
            get {
                return ResourceManager.GetString("DbSetup_C_CommentDb", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP SCHEMA IF EXISTS &quot;public&quot;;.
        /// </summary>
        internal static string DbSetup_D_DropPublicSchema {
            get {
                return ResourceManager.GetString("DbSetup_D_DropPublicSchema", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE SCHEMA ErrorTrackerGlobal
        ///	AUTHORIZATION %DBUSER;
        ///
        ///
        ///
        ///
        ///
        ///CREATE TABLE ErrorTrackerGlobal.DbVersion
        ///(
        ///	CurrentVersion integer NOT NULL
        ///);
        ///ALTER TABLE ErrorTrackerGlobal.DbVersion
        ///	OWNER to %DBUSER;
        ///INSERT INTO ErrorTrackerGlobal.DbVersion (CurrentVersion) VALUES (2);
        ///
        ///
        ///
        ///
        ///
        ///CREATE TABLE ErrorTrackerGlobal.LoginRecord
        ///(
        ///	UserName varchar NOT NULL,
        ///	IPAddress inet NOT NULL,
        ///	SessionID varchar NOT NULL,
        ///	Date bigint NOT NULL
        ///);
        ///ALTER TABLE ErrorTrackerGlobal.LoginRecord
        ///	OWNER to % [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GlobalSetup_2 {
            get {
                return ResourceManager.GetString("GlobalSetup_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE SCHEMA %PR
        ///	AUTHORIZATION %DBUSER;
        ///
        ///
        ///
        ///
        ///
        ///CREATE TABLE %PR.DbVersion
        ///(
        ///	CurrentVersion integer NOT NULL
        ///);
        ///ALTER TABLE %PR.DbVersion
        ///	OWNER to %DBUSER;
        ///INSERT INTO %PR.DbVersion (CurrentVersion) VALUES (6);
        ///
        ///--------------------
        ///-- Create Tables
        ///--------------------
        ///
        ///CREATE TABLE %PR.Event
        ///(
        ///	EventId bigint NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
        ///	FolderId integer NOT NULL,
        ///	EventType smallint NOT NULL,
        ///	SubType varchar NOT NULL,
        ///	Message varchar NOT NULL,
        ///	Date big [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ProjectSetup_6_1_Tables {
            get {
                return ResourceManager.GetString("ProjectSetup_6_1_Tables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BEGIN TRANSACTION;
        ///DROP PROCEDURE IF EXISTS testb.&quot;GetEvents&quot;;
        ///CREATE PROCEDURE testb.&quot;GetEvents&quot; (
        ///	IN oldest bigint, -- Pass null to disable this date boundary
        ///	IN newest bigint, -- Pass null to disable this date boundary
        ///	IN folderid integer, -- If null, all folders will be searched
        ///	IN customtagkey varchar, -- If null, no CTag will be added to the result set.
        ///	IN includetags boolean, -- If true, a second table containing tags will be returned.
        ///	OUT tags refcursor
        ///)
        ///LANGUAGE &apos;plpgsql&apos;
        ///AS $BODY [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ProjectSetup_6_2_GetEventsWithoutTagsByDate {
            get {
                return ResourceManager.GetString("ProjectSetup_6_2_GetEventsWithoutTagsByDate", resourceCulture);
            }
        }
    }
}
